openapi: 3.0.3
info:
  title: Scraping Backend API
  version: 1.0.0
  description: API for web scraping backend with user accounts
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      description: Authenticate user and obtain JWT access and refresh tokens
      summary: Login user
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          description: Login successful, tokens returned
        '401':
          description: Invalid credentials
  /auth/logout/:
    post:
      operationId: auth_logout_create
      description: Blacklist the refresh token to logout the user
      summary: Logout user
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  description: Refresh token to blacklist
              required:
              - refresh
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Successfully logged out
        '400':
          description: Invalid or missing refresh token
  /auth/register/:
    post:
      operationId: auth_register_create
      description: Create a new user account with email and password
      summary: Register a new user
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation errors
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: Obtain a new access token using a valid refresh token
      summary: Refresh access token
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          description: New access token generated
        '401':
          description: Invalid refresh token
  /jobs/:
    get:
      operationId: jobs_list
      description: Get a list of all jobs for spiders owned by the authenticated user
      summary: List jobs
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Jobs
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobList'
          description: ''
    post:
      operationId: jobs_create
      description: Create a new job to run a spider
      summary: Create job
      tags:
      - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
  /jobs/{id}/:
    get:
      operationId: jobs_retrieve
      description: Retrieve a specific job by ID
      summary: Get job
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Job ID
        required: true
      tags:
      - Jobs
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    put:
      operationId: jobs_update
      description: Update a job (full update)
      summary: Update job
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Job ID
        required: true
      tags:
      - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    patch:
      operationId: jobs_partial_update
      description: Partially update a job (e.g., update status, stats)
      summary: Partial update job
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Job ID
        required: true
      tags:
      - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJobRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJobRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJobRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    delete:
      operationId: jobs_destroy
      description: Delete a job record
      summary: Delete job
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Job ID
        required: true
      tags:
      - Jobs
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /profiles/me/:
    get:
      operationId: profiles_me_list
      description: Retrieve the current authenticated user's profile information
      summary: Get current user profile
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProfileList'
          description: ''
    put:
      operationId: profiles_me_update
      description: Update the current authenticated user's profile information
      summary: Update current user profile
      tags:
      - Profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: profiles_me_partial_update
      description: Partially update the current authenticated user's profile information
      summary: Partially update current user profile
      tags:
      - Profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /projects/:
    get:
      operationId: projects_list
      description: Get a list of all projects owned by the authenticated user
      summary: List projects
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Projects
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: projects_create
      description: Create a new project for the authenticated user
      summary: Create project
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /projects/{id}/:
    get:
      operationId: projects_retrieve
      description: Retrieve a specific project by ID
      summary: Get project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: projects_update
      description: Update a project (full update)
      summary: Update project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: projects_partial_update
      description: Partially update a project
      summary: Partial update project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: projects_destroy
      description: Delete a project
      summary: Delete project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /proxies/:
    get:
      operationId: proxies_list
      description: ViewSet for managing proxy servers.
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProxyListList'
          description: ''
    post:
      operationId: proxies_create
      description: ViewSet for managing proxy servers.
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProxyCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProxyCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyCreate'
          description: ''
  /proxies/{id}/:
    get:
      operationId: proxies_retrieve
      description: ViewSet for managing proxy servers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
    put:
      operationId: proxies_update
      description: ViewSet for managing proxy servers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
    patch:
      operationId: proxies_partial_update
      description: ViewSet for managing proxy servers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProxyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProxyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProxyRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
    delete:
      operationId: proxies_destroy
      description: ViewSet for managing proxy servers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /proxies/{id}/health_check/:
    get:
      operationId: proxies_health_check_retrieve
      description: Get detailed health information for a proxy.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
  /proxies/{id}/mark_failure/:
    post:
      operationId: proxies_mark_failure_create
      description: Mark proxy as failed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyMarkResultRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProxyMarkResultRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProxyMarkResultRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyMarkResult'
          description: ''
  /proxies/{id}/mark_success/:
    post:
      operationId: proxies_mark_success_create
      description: Mark proxy as successfully used.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyMarkResultRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProxyMarkResultRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProxyMarkResultRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyMarkResult'
          description: ''
  /proxies/{id}/reset_stats/:
    post:
      operationId: proxies_reset_stats_create
      description: Reset proxy statistics.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this proxy.
        required: true
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
  /proxies/active_proxies/:
    get:
      operationId: proxies_active_proxies_retrieve
      description: Get all active proxies.
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyStats'
          description: ''
  /proxies/cleanup_failed/:
    post:
      operationId: proxies_cleanup_failed_create
      description: Clean up proxies with too many failures.
      tags:
      - proxies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
  /proxies/healthy_proxies/:
    get:
      operationId: proxies_healthy_proxies_retrieve
      description: Get all healthy proxies.
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyStats'
          description: ''
  /proxies/next_proxy/:
    get:
      operationId: proxies_next_proxy_retrieve
      description: Get the next proxy for rotation.
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          description: ''
  /proxies/stats/:
    get:
      operationId: proxies_stats_retrieve
      description: Get proxy statistics overview.
      tags:
      - proxies
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyStats'
          description: ''
  /requests/:
    get:
      operationId: requests_list
      description: Get a list of all queued requests for jobs owned by the authenticated
        user
      summary: List requests
      parameters:
      - in: query
        name: job
        schema:
          type: integer
        description: Filter by job ID
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: priority_min
        schema:
          type: integer
        description: Minimum priority
      - in: query
        name: status
        schema:
          type: string
        description: Filter by status
      tags:
      - Requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRequestQueueList'
          description: ''
    post:
      operationId: requests_create
      description: Add a new HTTP request to the queue
      summary: Create request
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
  /requests/{id}/:
    get:
      operationId: requests_retrieve
      description: Retrieve a specific queued request by ID
      summary: Get request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Request ID
        required: true
      tags:
      - Requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
    put:
      operationId: requests_update
      description: Update a queued request (full update)
      summary: Update request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Request ID
        required: true
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
    patch:
      operationId: requests_partial_update
      description: Partially update a queued request (e.g., update status, priority)
      summary: Partial update request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Request ID
        required: true
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRequestQueueRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
    delete:
      operationId: requests_destroy
      description: Remove a request from the queue
      summary: Delete request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Request ID
        required: true
      tags:
      - Requests
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /requests/{id}/mark_done/:
    post:
      operationId: requests_mark_done_create
      description: Mark a request as completed successfully
      summary: Mark request done
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
  /requests/{id}/mark_error/:
    post:
      operationId: requests_mark_error_create
      description: Mark a request as failed with error
      summary: Mark request error
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
  /requests/{id}/mark_in_progress/:
    post:
      operationId: requests_mark_in_progress_create
      description: Mark a pending request as in progress (dequeue for processing)
      summary: Mark request in progress
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
  /requests/{id}/retry/:
    post:
      operationId: requests_retry_create
      description: Reset a failed request for retry if retries are available
      summary: Retry request
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestQueueRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestQueue'
          description: ''
  /requests/next_pending/:
    get:
      operationId: requests_next_pending_list
      description: Get the next pending requests for processing (worker endpoint)
      summary: Get next pending requests
      parameters:
      - in: query
        name: job
        schema:
          type: integer
        description: Filter by specific job ID
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of requests to fetch
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRequestQueueList'
          description: ''
  /responses/:
    get:
      operationId: responses_list
      description: Get a list of all HTTP responses for requests owned by the authenticated
        user
      summary: List responses
      parameters:
      - in: query
        name: from_cache
        schema:
          type: boolean
        description: Filter by cache status
      - in: query
        name: max_latency
        schema:
          type: integer
        description: Maximum latency in ms
      - in: query
        name: min_latency
        schema:
          type: integer
        description: Minimum latency in ms
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: request
        schema:
          type: integer
        description: Filter by request ID
      - in: query
        name: status_code
        schema:
          type: integer
        description: Filter by HTTP status code
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseList'
          description: ''
    post:
      operationId: responses_create
      description: Create a new HTTP response record
      summary: Create response
      tags:
      - Responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
  /responses/{id}/:
    get:
      operationId: responses_retrieve
      description: Retrieve a specific HTTP response by ID
      summary: Get response
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Response ID
        required: true
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    put:
      operationId: responses_update
      description: Update an HTTP response record (full update)
      summary: Update response
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Response ID
        required: true
      tags:
      - Responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResponseRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    patch:
      operationId: responses_partial_update
      description: Partially update an HTTP response record
      summary: Partial update response
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Response ID
        required: true
      tags:
      - Responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResponseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResponseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResponseRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    delete:
      operationId: responses_destroy
      description: Delete an HTTP response record and its body file
      summary: Delete response
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Response ID
        required: true
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /responses/{id}/body/:
    get:
      operationId: responses_body_retrieve
      description: Retrieve the response body content from disk
      summary: Get response body
      parameters:
      - in: query
        name: download
        schema:
          type: boolean
        description: Download as file
      - in: query
        name: encoding
        schema:
          type: string
        description: 'Text encoding (default: utf-8)'
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBody'
          description: ''
        '404':
          description: No response body
  /responses/{id}/save_body/:
    post:
      operationId: responses_save_body_create
      description: Save response body content to disk
      summary: Save response body
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Responses
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
  /responses/errors/:
    get:
      operationId: responses_errors_list
      description: Get all responses with 4xx and 5xx status codes
      summary: Get error responses
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseList'
          description: ''
  /responses/stats/:
    get:
      operationId: responses_stats_retrieve
      description: Get statistics about responses for the authenticated user
      summary: Get response statistics
      parameters:
      - in: query
        name: job
        schema:
          type: integer
        description: Filter by specific job ID
      - in: query
        name: spider
        schema:
          type: integer
        description: Filter by specific spider ID
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStats'
          description: ''
  /responses/successful/:
    get:
      operationId: responses_successful_list
      description: Get all responses with 2xx status codes
      summary: Get successful responses
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Responses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseList'
          description: ''
  /schedules/:
    get:
      operationId: schedules_list
      description: Get a list of all schedules for spiders owned by the authenticated
        user
      summary: List schedules
      parameters:
      - in: query
        name: due
        schema:
          type: boolean
        description: Filter by due status
      - in: query
        name: enabled
        schema:
          type: boolean
        description: Filter by enabled status
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: spider
        schema:
          type: integer
        description: Filter by spider ID
      - in: query
        name: timezone
        schema:
          type: string
        description: Filter by timezone
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScheduleList'
          description: ''
    post:
      operationId: schedules_create
      description: Create a new schedule for automated spider execution
      summary: Create schedule
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /schedules/{id}/:
    get:
      operationId: schedules_retrieve
      description: Retrieve a specific schedule by ID
      summary: Get schedule
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Schedule ID
        required: true
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
    put:
      operationId: schedules_update
      description: Update a schedule (full update)
      summary: Update schedule
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Schedule ID
        required: true
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
    patch:
      operationId: schedules_partial_update
      description: Partially update a schedule (e.g., enable/disable, change cron)
      summary: Partial update schedule
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Schedule ID
        required: true
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedScheduleRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
    delete:
      operationId: schedules_destroy
      description: Delete a schedule permanently
      summary: Delete schedule
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Schedule ID
        required: true
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /schedules/{id}/disable/:
    post:
      operationId: schedules_disable_create
      description: Disable a schedule and clear next run time
      summary: Disable schedule
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /schedules/{id}/enable/:
    post:
      operationId: schedules_enable_create
      description: Enable a disabled schedule and calculate next run time
      summary: Enable schedule
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /schedules/{id}/mark_executed/:
    post:
      operationId: schedules_mark_executed_create
      description: Mark a schedule as executed and calculate next run time
      summary: Mark schedule executed
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /schedules/{id}/recalculate/:
    post:
      operationId: schedules_recalculate_create
      description: Manually recalculate the next run time for a schedule
      summary: Recalculate next run
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Schedules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /schedules/cron_help/:
    get:
      operationId: schedules_cron_help_retrieve
      description: Get help and examples for cron expressions
      summary: Get cron expression help
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CronExpressionHelp'
          description: ''
  /schedules/due/:
    get:
      operationId: schedules_due_list
      description: Get all schedules that are currently due for execution (worker
        endpoint)
      summary: Get due schedules
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScheduleList'
          description: ''
  /schedules/stats/:
    get:
      operationId: schedules_stats_retrieve
      description: Get statistics about schedules for the authenticated user
      summary: Get schedule statistics
      parameters:
      - in: query
        name: spider
        schema:
          type: integer
        description: Filter by specific spider ID
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleStats'
          description: ''
  /schedules/upcoming/:
    get:
      operationId: schedules_upcoming_list
      description: Get schedules due within the next N hours
      summary: Get upcoming schedules
      parameters:
      - in: query
        name: hours
        schema:
          type: integer
        description: 'Hours to look ahead (default: 24)'
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Schedules
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScheduleList'
          description: ''
  /sessions/:
    get:
      operationId: sessions_list
      description: ViewSet for managing spider sessions.
      parameters:
      - in: query
        name: label
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: spider
        schema:
          type: integer
      tags:
      - sessions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSessionListList'
          description: ''
    post:
      operationId: sessions_create
      description: ViewSet for managing spider sessions.
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCreate'
          description: ''
  /sessions/{id}/:
    get:
      operationId: sessions_retrieve
      description: ViewSet for managing spider sessions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    put:
      operationId: sessions_update
      description: ViewSet for managing spider sessions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    patch:
      operationId: sessions_partial_update
      description: ViewSet for managing spider sessions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSessionRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    delete:
      operationId: sessions_destroy
      description: ViewSet for managing spider sessions.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /sessions/{id}/extend_validity/:
    post:
      operationId: sessions_extend_validity_create
      description: Extend session validity by specified hours.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionExtendValidityRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionExtendValidityRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionExtendValidityRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionExtendValidity'
          description: ''
  /sessions/{id}/status/:
    get:
      operationId: sessions_status_retrieve
      description: Get session status information.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this session.
        required: true
      tags:
      - sessions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /sessions/cleanup_expired/:
    post:
      operationId: sessions_cleanup_expired_create
      description: Clean up all expired sessions.
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /sessions/expired_sessions/:
    get:
      operationId: sessions_expired_sessions_retrieve
      description: Get all expired sessions.
      tags:
      - sessions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /sessions/valid_sessions/:
    get:
      operationId: sessions_valid_sessions_retrieve
      description: Get all valid (non-expired) sessions.
      tags:
      - sessions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /spiders/:
    get:
      operationId: spiders_list
      description: Get a list of all spiders belonging to projects owned by the authenticated
        user
      summary: List spiders
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Spiders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSpiderList'
          description: ''
    post:
      operationId: spiders_create
      description: Create a new spider configuration for web scraping
      summary: Create spider
      tags:
      - Spiders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpiderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SpiderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SpiderRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spider'
          description: ''
  /spiders/{id}/:
    get:
      operationId: spiders_retrieve
      description: Retrieve a specific spider configuration by ID
      summary: Get spider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Spider ID
        required: true
      tags:
      - Spiders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spider'
          description: ''
    put:
      operationId: spiders_update
      description: Update a spider configuration (full update)
      summary: Update spider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Spider ID
        required: true
      tags:
      - Spiders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpiderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SpiderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SpiderRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spider'
          description: ''
    patch:
      operationId: spiders_partial_update
      description: Partially update a spider configuration
      summary: Partial update spider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Spider ID
        required: true
      tags:
      - Spiders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSpiderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSpiderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSpiderRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spider'
          description: ''
    delete:
      operationId: spiders_destroy
      description: Delete a spider configuration
      summary: Delete spider
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Spider ID
        required: true
      tags:
      - Spiders
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    CronExpressionHelp:
      type: object
      description: Serializer for cron expression help and examples.
      properties:
        examples:
          type: object
          additionalProperties: {}
          readOnly: true
        fields:
          type: object
          additionalProperties: {}
          readOnly: true
        special_characters:
          type: object
          additionalProperties: {}
          readOnly: true
        common_patterns:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - common_patterns
      - examples
      - fields
      - special_characters
    Job:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        spider:
          type: integer
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        started_at:
          type: string
          format: date-time
          nullable: true
        finished_at:
          type: string
          format: date-time
          nullable: true
        stats_json:
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        duration:
          type: number
          format: double
          nullable: true
          readOnly: true
      required:
      - created_at
      - duration
      - id
      - spider
    JobRequest:
      type: object
      properties:
        spider:
          type: integer
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        started_at:
          type: string
          format: date-time
          nullable: true
        finished_at:
          type: string
          format: date-time
          nullable: true
        stats_json:
          nullable: true
      required:
      - spider
    JobStatusEnum:
      enum:
      - queued
      - running
      - done
      - failed
      - canceled
      type: string
      description: |-
        * `queued` - Queued
        * `running` - Running
        * `done` - Done
        * `failed` - Failed
        * `canceled` - Canceled
    MethodEnum:
      enum:
      - GET
      - POST
      - PUT
      - PATCH
      - DELETE
      - HEAD
      - OPTIONS
      type: string
      description: |-
        * `GET` - GET
        * `POST` - POST
        * `PUT` - PUT
        * `PATCH` - PATCH
        * `DELETE` - DELETE
        * `HEAD` - HEAD
        * `OPTIONS` - OPTIONS
    PaginatedJobList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    PaginatedProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
    PaginatedProjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedProxyListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProxyList'
    PaginatedRequestQueueList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RequestQueue'
    PaginatedResponseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Response'
    PaginatedScheduleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
    PaginatedSessionListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SessionList'
    PaginatedSpiderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Spider'
    PatchedJobRequest:
      type: object
      properties:
        spider:
          type: integer
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        started_at:
          type: string
          format: date-time
          nullable: true
        finished_at:
          type: string
          format: date-time
          nullable: true
        stats_json:
          nullable: true
    PatchedProfileRequest:
      type: object
      description: Serializer for user profile.
      properties:
        display_name:
          type: string
          maxLength: 60
        bio:
          type: string
        avatar:
          type: string
          format: binary
          nullable: true
    PatchedProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 120
        notes:
          type: string
    PatchedProxyRequest:
      type: object
      description: Serializer for Proxy model.
      properties:
        uri:
          type: string
          minLength: 1
          description: Proxy URI (scheme://user:pass@host:port)
          maxLength: 500
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        meta_json:
          nullable: true
          description: Additional metadata for this proxy
    PatchedRequestQueueRequest:
      type: object
      properties:
        job:
          type: integer
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 2000
        method:
          $ref: '#/components/schemas/MethodEnum'
        headers_json:
          nullable: true
        body_blob:
          type: string
          nullable: true
        priority:
          type: integer
        depth:
          type: integer
        retries:
          type: integer
        max_retries:
          type: integer
        scheduled_at:
          type: string
          format: date-time
        picked_at:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/RequestQueueStatusEnum'
    PatchedResponseRequest:
      type: object
      properties:
        request:
          type: integer
        final_url:
          type: string
          format: uri
          nullable: true
          maxLength: 2000
        status_code:
          type: integer
          nullable: true
        headers_json:
          nullable: true
        fetched_at:
          type: string
          format: date-time
        latency_ms:
          type: integer
          nullable: true
        from_cache:
          type: boolean
        body_path:
          type: string
          nullable: true
        content_hash:
          type: string
          nullable: true
          maxLength: 64
    PatchedScheduleRequest:
      type: object
      properties:
        spider:
          type: integer
        cron_expr:
          type: string
          minLength: 1
          description: Cron expression (e.g., '0 */6 * * *' for every 6 hours)
          maxLength: 100
        timezone:
          type: string
          minLength: 1
          description: Timezone for schedule execution
          maxLength: 50
        enabled:
          type: boolean
    PatchedSessionRequest:
      type: object
      description: Serializer for Session model.
      properties:
        spider:
          type: integer
        label:
          type: string
          nullable: true
          description: Session label (e.g., 'default', 'sellerA')
          maxLength: 100
        cookies_json:
          nullable: true
          description: Cookies for this session
        headers_json:
          nullable: true
          description: Headers for this session
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: When this session expires
    PatchedSpiderRequest:
      type: object
      properties:
        project:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 120
        start_urls_json: {}
        settings_json:
          nullable: true
        parse_rules_json:
          nullable: true
    Profile:
      type: object
      description: Serializer for user profile.
      properties:
        id:
          type: integer
          readOnly: true
        display_name:
          type: string
          maxLength: 60
        bio:
          type: string
        avatar:
          type: string
          format: uri
          nullable: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - id
      - user
    ProfileRequest:
      type: object
      description: Serializer for user profile.
      properties:
        display_name:
          type: string
          maxLength: 60
        bio:
          type: string
        avatar:
          type: string
          format: binary
          nullable: true
    Project:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 120
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
    ProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 120
        notes:
          type: string
      required:
      - name
    Proxy:
      type: object
      description: Serializer for Proxy model.
      properties:
        id:
          type: integer
          readOnly: true
        uri:
          type: string
          description: Proxy URI (scheme://user:pass@host:port)
          maxLength: 500
        masked_uri:
          type: string
          readOnly: true
        hostname:
          type: string
          readOnly: true
        port:
          type: integer
          readOnly: true
        scheme:
          type: string
          readOnly: true
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        is_healthy:
          type: boolean
          readOnly: true
        success_rate:
          type: number
          format: double
          nullable: true
          readOnly: true
        meta_json:
          nullable: true
          description: Additional metadata for this proxy
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - hostname
      - id
      - is_healthy
      - masked_uri
      - port
      - scheme
      - success_rate
      - updated_at
      - uri
    ProxyCreate:
      type: object
      description: Serializer for creating proxies with additional validation.
      properties:
        id:
          type: integer
          readOnly: true
        uri:
          type: string
          description: Proxy URI (scheme://user:pass@host:port)
          maxLength: 500
        masked_uri:
          type: string
          readOnly: true
        hostname:
          type: string
          readOnly: true
        port:
          type: integer
          readOnly: true
        scheme:
          type: string
          readOnly: true
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        is_healthy:
          type: boolean
          readOnly: true
        success_rate:
          type: number
          format: double
          nullable: true
          readOnly: true
        meta_json:
          nullable: true
          description: Additional metadata for this proxy
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - hostname
      - id
      - is_healthy
      - masked_uri
      - port
      - scheme
      - success_rate
      - updated_at
      - uri
    ProxyCreateRequest:
      type: object
      description: Serializer for creating proxies with additional validation.
      properties:
        uri:
          type: string
          minLength: 1
          description: Proxy URI (scheme://user:pass@host:port)
          maxLength: 500
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        meta_json:
          nullable: true
          description: Additional metadata for this proxy
      required:
      - uri
    ProxyList:
      type: object
      description: Lightweight serializer for proxy lists.
      properties:
        id:
          type: integer
          readOnly: true
        masked_uri:
          type: string
          readOnly: true
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        is_healthy:
          type: boolean
          readOnly: true
        success_rate:
          type: number
          format: double
          nullable: true
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - is_healthy
      - masked_uri
      - success_rate
      - updated_at
    ProxyMarkResult:
      type: object
      description: Serializer for marking proxy success/failure.
      properties:
        error_message:
          type: string
          description: Error message for failures
    ProxyMarkResultRequest:
      type: object
      description: Serializer for marking proxy success/failure.
      properties:
        error_message:
          type: string
          description: Error message for failures
    ProxyRequest:
      type: object
      description: Serializer for Proxy model.
      properties:
        uri:
          type: string
          minLength: 1
          description: Proxy URI (scheme://user:pass@host:port)
          maxLength: 500
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        meta_json:
          nullable: true
          description: Additional metadata for this proxy
      required:
      - uri
    ProxyStats:
      type: object
      description: Serializer for proxy statistics.
      properties:
        id:
          type: integer
          readOnly: true
        masked_uri:
          type: string
          readOnly: true
        is_active:
          type: boolean
          description: Whether this proxy is active for rotation
        last_ok_at:
          type: string
          format: date-time
          nullable: true
          description: Last time this proxy was successfully used
        fail_count:
          type: integer
          description: Number of consecutive failures
        is_healthy:
          type: boolean
          readOnly: true
        success_rate:
          type: number
          format: double
          nullable: true
          readOnly: true
        total_attempts:
          type: integer
          readOnly: true
        successful_attempts:
          type: integer
          readOnly: true
        last_success_at:
          type: string
          nullable: true
          readOnly: true
        last_failure_at:
          type: string
          nullable: true
          readOnly: true
        last_error:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - is_healthy
      - last_error
      - last_failure_at
      - last_success_at
      - masked_uri
      - success_rate
      - successful_attempts
      - total_attempts
    RequestQueue:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        job:
          type: integer
        url:
          type: string
          format: uri
          maxLength: 2000
        method:
          $ref: '#/components/schemas/MethodEnum'
        headers_json:
          nullable: true
        body_blob:
          type: string
          nullable: true
        priority:
          type: integer
        depth:
          type: integer
        retries:
          type: integer
        max_retries:
          type: integer
        fingerprint:
          type: string
          readOnly: true
        scheduled_at:
          type: string
          format: date-time
        picked_at:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/RequestQueueStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        can_retry:
          type: boolean
          readOnly: true
      required:
      - can_retry
      - created_at
      - fingerprint
      - id
      - job
      - updated_at
      - url
    RequestQueueRequest:
      type: object
      properties:
        job:
          type: integer
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 2000
        method:
          $ref: '#/components/schemas/MethodEnum'
        headers_json:
          nullable: true
        body_blob:
          type: string
          nullable: true
        priority:
          type: integer
        depth:
          type: integer
        retries:
          type: integer
        max_retries:
          type: integer
        scheduled_at:
          type: string
          format: date-time
        picked_at:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/RequestQueueStatusEnum'
      required:
      - job
      - url
    RequestQueueStatusEnum:
      enum:
      - pending
      - in_progress
      - done
      - error
      - skipped
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `done` - Done
        * `error` - Error
        * `skipped` - Skipped
    Response:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        request:
          type: integer
        final_url:
          type: string
          format: uri
          nullable: true
          maxLength: 2000
        status_code:
          type: integer
          nullable: true
        headers_json:
          nullable: true
        fetched_at:
          type: string
          format: date-time
        latency_ms:
          type: integer
          nullable: true
        from_cache:
          type: boolean
        body_path:
          type: string
          nullable: true
        content_hash:
          type: string
          nullable: true
          maxLength: 64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_success:
          type: boolean
          readOnly: true
        is_redirect:
          type: boolean
          readOnly: true
        is_client_error:
          type: boolean
          readOnly: true
        is_server_error:
          type: boolean
          readOnly: true
        body_size:
          type: integer
          readOnly: true
      required:
      - body_size
      - created_at
      - id
      - is_client_error
      - is_redirect
      - is_server_error
      - is_success
      - request
      - updated_at
    ResponseBody:
      type: object
      description: Serializer for response body content (separate endpoint).
      properties:
        body:
          type: string
          readOnly: true
        content_type:
          type: string
          readOnly: true
        encoding:
          type: string
          readOnly: true
        size:
          type: integer
          readOnly: true
      required:
      - body
      - content_type
      - encoding
      - size
    ResponseRequest:
      type: object
      properties:
        request:
          type: integer
        final_url:
          type: string
          format: uri
          nullable: true
          maxLength: 2000
        status_code:
          type: integer
          nullable: true
        headers_json:
          nullable: true
        fetched_at:
          type: string
          format: date-time
        latency_ms:
          type: integer
          nullable: true
        from_cache:
          type: boolean
        body_path:
          type: string
          nullable: true
        content_hash:
          type: string
          nullable: true
          maxLength: 64
      required:
      - request
    ResponseStats:
      type: object
      description: Serializer for response statistics.
      properties:
        total_responses:
          type: integer
          readOnly: true
        successful_responses:
          type: integer
          readOnly: true
        error_responses:
          type: integer
          readOnly: true
        avg_latency_ms:
          type: number
          format: double
          readOnly: true
        status_code_distribution:
          type: object
          additionalProperties: {}
          readOnly: true
        cache_hit_rate:
          type: number
          format: double
          readOnly: true
      required:
      - avg_latency_ms
      - cache_hit_rate
      - error_responses
      - status_code_distribution
      - successful_responses
      - total_responses
    Schedule:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        spider:
          type: integer
        cron_expr:
          type: string
          description: Cron expression (e.g., '0 */6 * * *' for every 6 hours)
          maxLength: 100
        timezone:
          type: string
          description: Timezone for schedule execution
          maxLength: 50
        enabled:
          type: boolean
        next_run_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        time_until_next_run:
          type: number
          format: double
          nullable: true
          readOnly: true
        is_overdue:
          type: boolean
          readOnly: true
        is_due:
          type: boolean
          readOnly: true
      required:
      - created_at
      - cron_expr
      - id
      - is_due
      - is_overdue
      - next_run_at
      - spider
      - time_until_next_run
      - updated_at
    ScheduleRequest:
      type: object
      properties:
        spider:
          type: integer
        cron_expr:
          type: string
          minLength: 1
          description: Cron expression (e.g., '0 */6 * * *' for every 6 hours)
          maxLength: 100
        timezone:
          type: string
          minLength: 1
          description: Timezone for schedule execution
          maxLength: 50
        enabled:
          type: boolean
      required:
      - cron_expr
      - spider
    ScheduleStats:
      type: object
      description: Serializer for schedule statistics.
      properties:
        total_schedules:
          type: integer
          readOnly: true
        enabled_schedules:
          type: integer
          readOnly: true
        disabled_schedules:
          type: integer
          readOnly: true
        due_schedules:
          type: integer
          readOnly: true
        overdue_schedules:
          type: integer
          readOnly: true
        upcoming_24h:
          type: integer
          readOnly: true
        timezone_distribution:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - disabled_schedules
      - due_schedules
      - enabled_schedules
      - overdue_schedules
      - timezone_distribution
      - total_schedules
      - upcoming_24h
    Session:
      type: object
      description: Serializer for Session model.
      properties:
        id:
          type: integer
          readOnly: true
        spider:
          type: integer
        spider_name:
          type: string
          readOnly: true
        label:
          type: string
          nullable: true
          description: Session label (e.g., 'default', 'sellerA')
          maxLength: 100
        cookies_json:
          nullable: true
          description: Cookies for this session
        headers_json:
          nullable: true
          description: Headers for this session
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: When this session expires
        is_expired:
          type: boolean
          readOnly: true
        is_valid:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - is_expired
      - is_valid
      - spider
      - spider_name
      - updated_at
    SessionCreate:
      type: object
      description: Serializer for creating sessions with extended validation.
      properties:
        id:
          type: integer
          readOnly: true
        spider:
          type: integer
        spider_name:
          type: string
          readOnly: true
        label:
          type: string
          nullable: true
          description: Session label (e.g., 'default', 'sellerA')
          maxLength: 100
        cookies_json:
          nullable: true
          description: Cookies for this session
        headers_json:
          nullable: true
          description: Headers for this session
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: When this session expires
        is_expired:
          type: boolean
          readOnly: true
        is_valid:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - is_expired
      - is_valid
      - spider
      - spider_name
      - updated_at
    SessionCreateRequest:
      type: object
      description: Serializer for creating sessions with extended validation.
      properties:
        spider:
          type: integer
        label:
          type: string
          nullable: true
          description: Session label (e.g., 'default', 'sellerA')
          maxLength: 100
        cookies_json:
          nullable: true
          description: Cookies for this session
        headers_json:
          nullable: true
          description: Headers for this session
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: When this session expires
      required:
      - spider
    SessionExtendValidity:
      type: object
      description: Serializer for extending session validity.
      properties:
        hours:
          type: integer
          maximum: 8760
          minimum: 1
          default: 24
          description: Number of hours to extend validity by
    SessionExtendValidityRequest:
      type: object
      description: Serializer for extending session validity.
      properties:
        hours:
          type: integer
          maximum: 8760
          minimum: 1
          default: 24
          description: Number of hours to extend validity by
    SessionList:
      type: object
      description: Lightweight serializer for session lists.
      properties:
        id:
          type: integer
          readOnly: true
        spider:
          type: integer
        spider_name:
          type: string
          readOnly: true
        label:
          type: string
          nullable: true
          description: Session label (e.g., 'default', 'sellerA')
          maxLength: 100
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: When this session expires
        is_expired:
          type: boolean
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - is_expired
      - spider
      - spider_name
      - updated_at
    SessionRequest:
      type: object
      description: Serializer for Session model.
      properties:
        spider:
          type: integer
        label:
          type: string
          nullable: true
          description: Session label (e.g., 'default', 'sellerA')
          maxLength: 100
        cookies_json:
          nullable: true
          description: Cookies for this session
        headers_json:
          nullable: true
          description: Headers for this session
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: When this session expires
      required:
      - spider
    Spider:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          type: integer
        name:
          type: string
          maxLength: 120
        start_urls_json: {}
        settings_json:
          nullable: true
        parse_rules_json:
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - project
      - start_urls_json
    SpiderRequest:
      type: object
      properties:
        project:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 120
        start_urls_json: {}
        settings_json:
          nullable: true
        parse_rules_json:
          nullable: true
      required:
      - name
      - project
      - start_urls_json
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    User:
      type: object
      description: Serializer for user data (read-only for profile endpoints).
      properties:
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
    UserRegistrationRequest:
      type: object
      description: Serializer for user registration.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
        password_confirm:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - password
      - password_confirm
    UserRequest:
      type: object
      description: Serializer for user data (read-only for profile endpoints).
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Auth
  description: Authentication endpoints
- name: Profiles
  description: User profile management
- name: Projects
  description: Project management
- name: Spiders
  description: Web spider/crawler management
- name: Jobs
  description: Spider job execution and monitoring
- name: Requests
  description: HTTP request queue management
- name: Responses
  description: HTTP response storage and analysis
- name: Schedules
  description: Automated spider scheduling with cron
